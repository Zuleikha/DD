// src/pages/ForumPage.tsx
import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async'; // Assuming you use Helmet for SEO
import { useAuth } from '../contexts/AuthContext'; // Assuming you have an AuthContext

// *** Import Realtime Database functions ***
import {
  ref,             // To get a reference to a location in the DB
  onValue,         // To listen for real-time data changes
  push,            // To add a new item with a unique ID (for posts and replies)
  set,             // To set data (used for simple updates or setting the initial state of a node)
  update,          // To update data (good for multiple fields at once)
  remove,          // To remove data (used for unliking in the object structure)
  query as rtdbQuery, // Import query specifically for RTDB and rename it
  orderByChild,    // To order data by a child key (like createdAt)
  get              // To get data once (like checking if a user liked a post)
} from 'firebase/database';

// *** Import your initialized Realtime Database service ***
// Make sure the path '../config/firebase' is correct and that file exports 'rtdb'
import { rtdb } from '../config/firebase';


import {
  MessageSquare,
  Plus,
  User,
  Clock,
  Heart,
  MessageCircle,
  PawPrint,
  LogIn, // <-- Imported Login
  UserPlus, // <-- Imported UserPlus
  Image,
  Video
} from 'lucide-react';
import { Link } from 'react-router-dom';
import BackToHomeButton from '../components/common/BackToHomeButton';
import MediaUpload from '../components/common/MediaUpload';

// *** Update interfaces based on RTDB structure (using objects/maps for likes/replies) ***
// Note: The actual data coming from RTDB via snapshot.val() will be JS objects,
// these interfaces help with type checking in TypeScript.
interface ForumPost {
  id: string; // The RTDB key assigned by push()
  title: string;
  content: string;
  author: string;
  authorId: string;
  createdAt: number; // Using numeric timestamp (Date.now()) for ordering
  likes?: { [userId: string]: boolean }; // Likes stored as an object { userId: true, ... }
  replies?: { [replyId: string]: Reply }; // Replies stored as an object { pushKey: ReplyData, ... }
  category: string;
  mediaUrl?: string;
  mediaType?: 'image' | 'video';
}

interface Reply {
  // The reply ID will be the key in the replies object in the DB, not a field within the object
  content: string;
  author: string;
  authorId: string;
  createdAt: number; // Using numeric timestamp
  likes?: { [userId: string]: boolean }; // Likes on replies
}

const ForumPage: React.FC = () => {
  // Assuming useAuth provides currentUser (which has uid, displayName, email) and logout
  const { currentUser, logout } = useAuth();
  const [posts, setPosts] = useState<ForumPost[]>([]);
  const [showNewPostForm, setShowNewPostForm] = useState(false);
  const [newPostTitle, setNewPostTitle] = useState('');
  const [newPostContent, setNewPostContent] = useState('');
  const [newPostCategory, setNewPostCategory] = useState('general');
  const [loading, setLoading] = useState(false);
  // Track selected post by ID for showing/hiding replies
  const [selectedPostId, setSelectedPostId] = useState<string | null>(null);
  const [replyContent, setReplyContent] = useState('');
  const [newPostMediaUrl, setNewPostMediaUrl] = useState('');
  const [newPostMediaType, setNewPostMediaType] = useState<'image' | 'video' | ''>('');

  const categories = [
    { value: 'general', label: 'General Discussion' },
    { value: 'health', label: 'Health & Wellness' },
    { value: 'training', label: 'Training & Behavior' },
    { value: 'nutrition', label: 'Nutrition & Diet' },
    { value: 'breeds', label: 'Breed Discussions' },
    { value: 'adoption', label: 'Adoption & Rescue' },
    { value: 'events', label: 'Events & Meetups' },
    { value: 'photos', label: 'Photos & Stories' }
  ];

  useEffect(() => {
    // *** Realtime Database: Listen for posts ***
    const postsRef = ref(rtdb, 'forumPosts/'); // Reference to the 'forumPosts' node
    // Create a query to order by the 'createdAt' child key
    // RTDB orderByChild gives results in ascending order of the child value
    // We'll fetch ascending and reverse client-side for descending display.
    const postsQuery = rtdbQuery(postsRef, orderByChild('createdAt'));


    const unsubscribe = onValue(postsQuery, (snapshot) => {
      const postsData: ForumPost[] = [];
      const data = snapshot.val(); // Get all data at this location as a JS object

      if (data) {
        // Iterate over the object keys (the post IDs generated by push)
        // Each key is the unique ID for a post
        Object.keys(data).forEach((postId) => {
          const post = data[postId];
          // Add the RTDB key (postId) as the 'id' property for easier handling
          // Also ensure likes and replies are treated as objects, default to empty if null/undefined
          postsData.push({
            id: postId,
            ...post,
            likes: post.likes || {},
            replies: post.replies || {}
           } as ForumPost); // Cast to ForumPost interface
        });
      }

      // RTDB orderByChild is ascending by default. Reverse for newest-first display.
      // For very large datasets where client-side reversal is slow, consider
      // a different data structure (e.g., storing with negative timestamps) or
      // implementing pagination.
      setPosts(postsData.reverse());

    }, (error) => {
        console.error('Error fetching posts:', error);
        // Optionally show error to user
    });

    // Detach the listener when the component unmounts
    return () => unsubscribe();
  }, [rtdb]); // Dependency array includes rtdb


    const handleCreatePost = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Enhanced validation and logging
    console.log('=== POST CREATION DEBUG ===');
    console.log('Current user:', currentUser);
    console.log('User UID:', currentUser?.uid);
    console.log('User display name:', currentUser?.displayName);
    console.log('User email:', currentUser?.email);
    console.log('Post title:', newPostTitle.trim());
    console.log('Post content:', newPostContent.trim());
    
    // Ensure user is logged in and fields are not empty
    if (!currentUser?.uid) {
       console.error("‚ùå Cannot create post: User not logged in");
       alert("You must be logged in to create a post. Please sign in and try again.");
       return;
    }
    
    if (!newPostTitle.trim()) {
       console.error("‚ùå Cannot create post: Title is empty");
       alert("Please enter a title for your post.");
       return;
    }
    
    if (!newPostContent.trim()) {
       console.error("‚ùå Cannot create post: Content is empty");
       alert("Please enter content for your post.");
       return;
    }

    setLoading(true);
    console.log('üîÑ Starting post creation...');

    try {
      // *** Use Realtime Database push to create a new post ***
      // Get a reference to the 'forumPosts' location
      const postsListRef = ref(rtdb, 'forumPosts/');
      console.log('üìç Database reference created:', postsListRef);

      const postData: Omit<ForumPost, 'id'> = {
        title: newPostTitle.trim(),
        content: newPostContent.trim(),
        category: newPostCategory,
        author: currentUser.displayName || currentUser.email || 'Anonymous',
        authorId: currentUser.uid,
        createdAt: Date.now(),
        likes: {},
        replies: {},
        // Add media if uploaded
        ...(newPostMediaUrl && newPostMediaType && { mediaUrl: newPostMediaUrl, mediaType: newPostMediaType }),
      };

      console.log('üìù Post data prepared:', postData);
      console.log('üöÄ Attempting to push to Firebase...');

      // Push the data to the location. push() automatically generates a unique, time-ordered key.
      const result = await push(postsListRef, postData);
      
      console.log('‚úÖ Post created successfully!');
      console.log('üìç New post key:', result.key);
      console.log('üìç New post reference:', result);

      // Clear form fields and hide form on success
      setNewPostTitle('');
      setNewPostContent('');
      setNewPostCategory('general');
      setNewPostMediaUrl('');
      setNewPostMediaType('');
      setShowNewPostForm(false);
      
      // Show success message
      alert('Post created successfully! üéâ');

    } catch (error: any) {
      console.error('‚ùå Error creating post:', error);
      console.error('‚ùå Error code:', error.code);
      console.error('‚ùå Error message:', error.message);
      console.error('‚ùå Full error object:', error);
      
      // Provide specific error messages based on error type
      let userMessage = 'Failed to create post. ';
      
      if (error.code === 'PERMISSION_DENIED') {
        userMessage += 'Permission denied. This usually means the database security rules are blocking writes. Please check your Firebase Database Rules.';
      } else if (error.code === 'NETWORK_ERROR') {
        userMessage += 'Network error. Please check your internet connection and try again.';
      } else if (error.code === 'INVALID_ARGUMENT') {
        userMessage += 'Invalid data format. Please try again.';
      } else {
        userMessage += `Error: ${error.message}`;
      }
      
      alert(userMessage);
      
    } finally {
      setLoading(false);
      console.log('üèÅ Post creation process completed');
      console.log('=== END POST CREATION DEBUG ===');
    }
  };



  const handleMediaUploaded = (mediaUrl: string, mediaType: 'image' | 'video') => {
    setNewPostMediaUrl(mediaUrl);
    setNewPostMediaType(mediaType);
  };

  const handleLikePost = async (postId: string) => {
    // Ensure user is logged in
    if (!currentUser?.uid) {
      console.warn("Cannot like post: User not logged in.");
      return;
    }

    try {
      // *** Realtime Database: Handle liking/unliking ***
      const userId = currentUser.uid;
      // Get a reference to the specific user's like node for this post
      const userLikeRef = ref(rtdb, `forumPosts/${postId}/likes/${userId}`);

      // Use a transaction or fetch-then-set pattern to check if it exists and toggle
      // Fetch current state once using get()
      const snapshot = await get(userLikeRef);

      if (snapshot.exists()) {
        // User has already liked, so unlike (remove their ID from the likes object)
        await remove(userLikeRef);
        console.log(`User ${userId} unliked post ${postId}`);
      } else {
        // User has not liked, so like (set their ID to true in the likes object)
        // Setting a simple value like true or the timestamp works.
        await set(userLikeRef, true);
        console.log(`User ${userId} liked post ${postId}`);
      }
    } catch (error) {
      console.error('Error liking post:', error);
      // Optionally show an error message to the user
    }
  };

  const handleReply = async (postId: string) => {
    // Ensure user is logged in and reply content is not empty
    if (!currentUser?.uid || !replyContent.trim()) {
      console.warn("Cannot add reply: User not logged in or reply content empty.");
      return;
    }

    try {
      // *** Realtime Database: Add a new reply ***
      // Get a reference to the specific post's replies location
      const postRepliesRef = ref(rtdb, `forumPosts/${postId}/replies`);

      const newReplyData: Omit<Reply, 'id'> = { // Data for the new reply
        content: replyContent.trim(),
        author: currentUser.displayName || currentUser.email || 'Anonymous', // Fallback author name
        authorId: currentUser.uid,
        createdAt: Date.now(), // Use numeric timestamp for ordering
        likes: {} // Initialize likes for the reply
      };

      // Push the reply data to the post's replies location.
      // push() generates a unique ID for this reply. The key of the new node
      // is the reply's ID in this RTDB structure.
      await push(postRepliesRef, newReplyData);

      // Clear the reply input field
      setReplyContent('');

    } catch (error) {
      console.error('Error adding reply:', error);
      // Optionally show an error message to the user
    }
  };


  // Helper function to format timestamps
  const formatDate = (timestamp: number) => {
    if (!timestamp) return 'Just now';
    const date = new Date(timestamp); // RTDB stores timestamps as numbers (from Date.now())
    // Check if the date is valid
    if (isNaN(date.getTime())) return 'Invalid date';
    return date.toLocaleDateString() + ' at ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  // Helper function to get the number of likes from the likes object
  const getLikeCount = (likes?: { [userId: string]: boolean }) => {
      return likes ? Object.keys(likes).length : 0;
  };

    // Helper function to check if the current user has liked an item
  const hasUserLiked = (likes?: { [userId: string]: boolean }, userId?: string | null) => {
      return userId && likes ? !!likes[userId] : false;
  };

    // Helper function to get the number of replies from the replies object
  const getReplyCount = (replies?: { [replyId: string]: Reply }) => {
      return replies ? Object.keys(replies).length : 0;
  };

    // Helper function to convert replies object to a sorted array for rendering
    const getSortedRepliesArray = (replies?: { [replyId: string]: Reply }) => {
        if (!replies) return [];
        // Convert the replies object into an array of Reply objects, including the key as 'id'
        return Object.keys(replies)
            .map(replyId => ({ id: replyId, ...replies[replyId] }))
            .sort((a, b) => a.createdAt - b.createdAt); // Sort by createdAt for chronological order
    };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-purple-50 py-12 px-4 sm:px-6 lg:px-8">
      <Helmet>
        <title>Forum - DogDays.ie</title>
        <meta name="description" content="Join the DogDays.ie community forum to discuss all things dog-related." />
      </Helmet>

      <BackToHomeButton />

      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-extrabold text-gray-900 mb-2">DogDays Forum</h1>
          <p className="text-lg text-gray-600">Connect with other dog lovers!</p>
        </div>

        {!currentUser ? (
          <div className="bg-yellow-50 border-l-4 border-yellow-400 text-yellow-800 p-4 mb-6 rounded-md shadow-sm flex items-center justify-between">
            <div className="flex items-center">
              <LogIn className="h-5 w-5 mr-3" />
              <p className="text-sm">
                Please <Link to="/login" className="font-medium underline hover:text-yellow-900">log in</Link> or <Link to="/signup" className="font-medium underline hover:text-yellow-900">sign up</Link> to participate in the forum.
              </p>
            </div>
            <div className="flex space-x-2">
              <Link to="/login" className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-yellow-800 bg-yellow-200 hover:bg-yellow-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500">
                <LogIn className="h-4 w-4 mr-2" /> Login
              </Link>
              <Link to="/signup" className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-yellow-800 bg-yellow-200 hover:bg-yellow-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500">
                <UserPlus className="h-4 w-4 mr-2" /> Sign Up
              </Link>
            </div>
          </div>
        ) : (
          <div className="mb-6 flex justify-end">
            <button
              onClick={() => setShowNewPostForm(!showNewPostForm)}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500"
            >
              <Plus className="-ml-1 mr-2 h-5 w-5" />
              {showNewPostForm ? 'Cancel New Post' : 'Create New Post'}
            </button>
          </div>
        )}

        {showNewPostForm && currentUser && (
          <div className="bg-white p-6 rounded-lg shadow-md mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Create New Post</h2>
            <form onSubmit={handleCreatePost} className="space-y-4">
              <div>
                <label htmlFor="postTitle" className="block text-sm font-medium text-gray-700">Title</label>
                <input
                  type="text"
                  id="postTitle"
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                  value={newPostTitle}
                  onChange={(e) => setNewPostTitle(e.target.value)}
                  required
                />
              </div>
              <div>
                <label htmlFor="postContent" className="block text-sm font-medium text-gray-700">Content</label>
                <textarea
                  id="postContent"
                  rows={5}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                  value={newPostContent}
                  onChange={(e) => setNewPostContent(e.target.value)}
                  required
                ></textarea>
              </div>
              <div>
                <label htmlFor="postCategory" className="block text-sm font-medium text-gray-700">Category</label>
                <select
                  id="postCategory"
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                  value={newPostCategory}
                  onChange={(e) => setNewPostCategory(e.target.value)}
                >
                  {categories.map((cat) => (
                    <option key={cat.value} value={cat.value}>{cat.label}</option>
                  ))}
                </select>
              </div>
              <MediaUpload onMediaUploaded={handleMediaUploaded} />
              <button
                type="submit"
                disabled={loading}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? 'Posting...' : 'Submit Post'}
              </button>
            </form>
          </div>
        )}

        <div className="space-y-6">
          {posts.length === 0 && !loading ? (
            <p className="text-center text-gray-600">No posts yet. Be the first to create one!</p>
          ) : (
            posts.map((post) => (
              <div key={post.id} className="bg-white p-6 rounded-lg shadow-md">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-2xl font-bold text-gray-900">{post.title}</h2>
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    <PawPrint className="h-3 w-3 mr-1" /> {categories.find(cat => cat.value === post.category)?.label || 'General'}
                  </span>
                </div>
                <p className="text-gray-700 mb-4">{post.content}</p>
                {post.mediaUrl && (
                  <div className="mb-4">
                    {post.mediaType === 'image' ? (
                      <img src={post.mediaUrl} alt="Post media" className="max-w-full h-auto rounded-md" />
                    ) : (
                      <video controls src={post.mediaUrl} className="max-w-full h-auto rounded-md" />
                    )}
                  </div>
                )}
                <div className="flex items-center text-sm text-gray-500 mb-4">
                  <User className="h-4 w-4 mr-1" /> {post.author}
                  <Clock className="h-4 w-4 ml-4 mr-1" /> {formatDate(post.createdAt)}
                </div>

                <div className="flex items-center space-x-4 border-t border-gray-200 pt-4">
                  <button
                    onClick={() => handleLikePost(post.id)}
                    className={`flex items-center text-sm font-medium ${hasUserLiked(post.likes, currentUser?.uid) ? 'text-red-500' : 'text-gray-500'} hover:text-red-600`}
                  >
                    <Heart className="h-5 w-5 mr-1" fill={hasUserLiked(post.likes, currentUser?.uid) ? 'currentColor' : 'none'} />
                    {getLikeCount(post.likes)} Likes
                  </button>
                  <button
                    onClick={() => setSelectedPostId(selectedPostId === post.id ? null : post.id)}
                    className="flex items-center text-sm font-medium text-gray-500 hover:text-blue-600"
                  >
                    <MessageCircle className="h-5 w-5 mr-1" /> {getReplyCount(post.replies)} Replies
                  </button>
                </div>

                {selectedPostId === post.id && (
                  <div className="mt-6 bg-gray-50 p-4 rounded-lg">
                    <h3 className="text-lg font-bold text-gray-800 mb-4">Replies</h3>
                    <div className="space-y-4">
                      {getSortedRepliesArray(post.replies).map((reply) => (
                        <div key={reply.id} className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                          <p className="text-gray-700 mb-2">{reply.content}</p>
                          <div className="flex items-center text-xs text-gray-500">
                            <User className="h-3 w-3 mr-1" /> {reply.author}
                            <Clock className="h-3 w-3 ml-3 mr-1" /> {formatDate(reply.createdAt)}
                          </div>
                        </div>
                      ))}
                    </div>
                    {currentUser && (
                      <div className="mt-4">
                        <textarea
                          rows={2}
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                          placeholder="Write a reply..."
                          value={replyContent}
                          onChange={(e) => setReplyContent(e.target.value)}
                        ></textarea>
                        <button
                          onClick={() => handleReply(post.id)}
                          className="mt-2 inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        >
                          Submit Reply
                        </button>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default ForumPage;


